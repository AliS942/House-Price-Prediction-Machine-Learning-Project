# -*- coding: utf-8 -*-
"""HousePricePredictioned.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oYpIPT5WRzxEb1v9yzxMnvbm12G_eJS_
"""

# House Price Prediction on Google Colab
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

# Load the data (Colab uses current directory)
df = pd.read_csv('train.csv')
print("Dataset Loaded")

# Handle missing values
df = df.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis=1)

# Fill numeric columns with median
numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].median())

# Fill categorical columns with mode
for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].fillna(df[col].mode()[0])

for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].fillna(df[col].mode()[0])

print("Missing values handled")

# Feature encoding
df = pd.get_dummies(df)

# Define features and target
y = df['SalePrice']
X = df.drop(['SalePrice', 'Id'], axis=1)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

print("Model trained")

# Test the model
y_pred = model.predict(X_test)

# Evaluate the model
print("R-squared:", r2_score(y_test, y_pred))
print("MSE:", mean_squared_error(y_test, y_pred))

# Visualize results
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.show()

# Save the model (optional, saved in Colab session)
joblib.dump(model, 'house_price_model.pkl')
print("Model saved as house_price_model.pkl")